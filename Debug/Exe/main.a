;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : MEHRBOD M.K. School Assistant
;Version : 0.0.0.9
;Date    : 30/07/2022
;Author  : Mehrbod Molla Kazemi
;Company : MelaTronX®
;Comments:
;
;
;Chip type               : ATmega128A
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// DS1302 Real Time Clock functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __ds1302_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
   .equ __ds1302_io=0
;PCODE: $0000000F VOL: 0
   .equ __ds1302_sclk=1
;PCODE: $00000010 VOL: 0
   .equ __ds1302_rst=2
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0023 #endasm
;#include <ds1302.h>
;
;// MAIN.H FILE.
;#include "main.h"
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0046 {

	.CSEG
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0047 char status,data;
; 0000 0048 status=UCSR0A;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0049 data=UDR0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 004A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004B    {
; 0000 004C    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004D #if RX_BUFFER_SIZE0 == 256
; 0000 004E    // special case for receiver buffer size=256
; 0000 004F    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0050 #else
; 0000 0051    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0052    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0053       {
; 0000 0054       rx_counter0=0;
;PCODE: $0000002C VOL: 0
; 0000 0055       rx_buffer_overflow0=1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0056       }
; 0000 0057 #endif
; 0000 0058    }
;PCODE: $00000030 VOL: 0
; 0000 0059 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0060 {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0061 char data;
; 0000 0062 while (rx_counter0==0);
;PCODE: $00000038 VOL: 0
;	data -> R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0063 data=rx_buffer0[rx_rd_index0++];
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0064 #if RX_BUFFER_SIZE0 != 256
; 0000 0065 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0066 #endif
; 0000 0067 #asm("cli")
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
	cli
;PCODE: $00000049 VOL: 0
; 0000 0068 --rx_counter0;
;PCODE: $0000004A VOL: 0
; 0000 0069 #asm("sei")
;PCODE: $0000004B VOL: 0
	sei
;PCODE: $0000004C VOL: 0
; 0000 006A return data;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006B }
;PCODE: $00000050 VOL: 0
;#pragma used-
;#endif
;
;// USART1 Receiver buffer
;#define RX_BUFFER_SIZE1 8
;char rx_buffer1[RX_BUFFER_SIZE1];
;
;#if RX_BUFFER_SIZE1 <= 256
;unsigned char rx_wr_index1=0,rx_rd_index1=0;
;#else
;unsigned int rx_wr_index1=0,rx_rd_index1=0;
;#endif
;
;#if RX_BUFFER_SIZE1 < 256
;unsigned char rx_counter1=0;
;#else
;unsigned int rx_counter1=0;
;#endif
;
;// This flag is set on USART1 Receiver buffer overflow
;bit rx_buffer_overflow1;
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 0084 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0085 char status,data;
; 0000 0086 status=UCSR1A;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0087 data=UDR1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0088 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0089    {
; 0000 008A    rx_buffer1[rx_wr_index1++]=data;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008B #if RX_BUFFER_SIZE1 == 256
; 0000 008C    // special case for receiver buffer size=256
; 0000 008D    if (++rx_counter1 == 0) rx_buffer_overflow1=1;
; 0000 008E #else
; 0000 008F    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0090    if (++rx_counter1 == RX_BUFFER_SIZE1)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0091       {
; 0000 0092       rx_counter1=0;
;PCODE: $0000006A VOL: 0
; 0000 0093       rx_buffer_overflow1=1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0094       }
; 0000 0095 #endif
; 0000 0096    }
;PCODE: $0000006E VOL: 0
; 0000 0097 }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;
;// Get a character from the USART1 Receiver buffer
;#pragma used+
;char getchar1(void)
; 0000 009C {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009D char data;
; 0000 009E while (rx_counter1==0);
;PCODE: $00000076 VOL: 0
;	data -> R17
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009F data=rx_buffer1[rx_rd_index1++];
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A0 #if RX_BUFFER_SIZE1 != 256
; 0000 00A1 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00A2 #endif
; 0000 00A3 #asm("cli")
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
	cli
;PCODE: $00000087 VOL: 0
; 0000 00A4 --rx_counter1;
;PCODE: $00000088 VOL: 0
; 0000 00A5 #asm("sei")
;PCODE: $00000089 VOL: 0
	sei
;PCODE: $0000008A VOL: 0
; 0000 00A6 return data;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00A7 }
;PCODE: $0000008E VOL: 0
;#pragma used-
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 00AC {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00AD while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000091 VOL: 0
;	c -> Y+0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00AE UDR1=c;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00AF }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
; 0000 00B6 {
;PCODE: $0000009D VOL: 0
; 0000 00B7 // Declare your local variables here
; 0000 00B8 
; 0000 00B9 // Input/Output Ports initialization
; 0000 00BA // Port A initialization
; 0000 00BB // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 00BC DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00BD // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
; 0000 00BE PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (1<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00BF 
; 0000 00C0 // Port B initialization
; 0000 00C1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C2 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00C3 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C4 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00C5 
; 0000 00C6 // Port C initialization
; 0000 00C7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C8 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00C9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00CA PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00CB 
; 0000 00CC // Port D initialization
; 0000 00CD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00CE DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00CF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D0 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00D1 
; 0000 00D2 // Port E initialization
; 0000 00D3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D4 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00D5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D6 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00D7 
; 0000 00D8 // Port F initialization
; 0000 00D9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00DA DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00DB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00DC PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00DD 
; 0000 00DE // Port G initialization
; 0000 00DF // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E0 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00E1 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E2 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00E3 
; 0000 00E4 // Timer/Counter 0 initialization
; 0000 00E5 // Clock source: System Clock
; 0000 00E6 // Clock value: Timer 0 Stopped
; 0000 00E7 // Mode: Normal top=0xFF
; 0000 00E8 // OC0 output: Disconnected
; 0000 00E9 ASSR=0<<AS0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00EA TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00EB TCNT0=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00EC OCR0=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00ED 
; 0000 00EE // Timer/Counter 1 initialization
; 0000 00EF // Clock source: System Clock
; 0000 00F0 // Clock value: Timer1 Stopped
; 0000 00F1 // Mode: Normal top=0xFFFF
; 0000 00F2 // OC1A output: Disconnected
; 0000 00F3 // OC1B output: Disconnected
; 0000 00F4 // OC1C output: Disconnected
; 0000 00F5 // Noise Canceler: Off
; 0000 00F6 // Input Capture on Falling Edge
; 0000 00F7 // Timer1 Overflow Interrupt: Off
; 0000 00F8 // Input Capture Interrupt: Off
; 0000 00F9 // Compare A Match Interrupt: Off
; 0000 00FA // Compare B Match Interrupt: Off
; 0000 00FB // Compare C Match Interrupt: Off
; 0000 00FC TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00FD TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00FE TCNT1H=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00FF TCNT1L=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0100 ICR1H=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0101 ICR1L=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0102 OCR1AH=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0103 OCR1AL=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0104 OCR1BH=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0105 OCR1BL=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0106 OCR1CH=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0107 OCR1CL=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0108 
; 0000 0109 // Timer/Counter 2 initialization
; 0000 010A // Clock source: System Clock
; 0000 010B // Clock value: Timer2 Stopped
; 0000 010C // Mode: Normal top=0xFF
; 0000 010D // OC2 output: Disconnected
; 0000 010E TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 010F TCNT2=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0110 OCR2=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0111 
; 0000 0112 // Timer/Counter 3 initialization
; 0000 0113 // Clock source: System Clock
; 0000 0114 // Clock value: Timer3 Stopped
; 0000 0115 // Mode: Normal top=0xFFFF
; 0000 0116 // OC3A output: Disconnected
; 0000 0117 // OC3B output: Disconnected
; 0000 0118 // OC3C output: Disconnected
; 0000 0119 // Noise Canceler: Off
; 0000 011A // Input Capture on Falling Edge
; 0000 011B // Timer3 Overflow Interrupt: Off
; 0000 011C // Input Capture Interrupt: Off
; 0000 011D // Compare A Match Interrupt: Off
; 0000 011E // Compare B Match Interrupt: Off
; 0000 011F // Compare C Match Interrupt: Off
; 0000 0120 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0121 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0122 TCNT3H=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0123 TCNT3L=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0124 ICR3H=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0125 ICR3L=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0126 OCR3AH=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0127 OCR3AL=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0128 OCR3BH=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0129 OCR3BL=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 012A OCR3CH=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 012B OCR3CL=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 012C 
; 0000 012D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 012E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 012F ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0130 
; 0000 0131 // External Interrupt(s) initialization
; 0000 0132 // INT0: Off
; 0000 0133 // INT1: Off
; 0000 0134 // INT2: Off
; 0000 0135 // INT3: Off
; 0000 0136 // INT4: Off
; 0000 0137 // INT5: Off
; 0000 0138 // INT6: Off
; 0000 0139 // INT7: Off
; 0000 013A EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 013B EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 013C EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 013D 
; 0000 013E // USART0 initialization
; 0000 013F // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0140 // USART0 Receiver: On
; 0000 0141 // USART0 Transmitter: On
; 0000 0142 // USART0 Mode: Asynchronous
; 0000 0143 // USART0 Baud Rate: 9600
; 0000 0144 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0145 UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0146 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0147 UBRR0H=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0148 UBRR0L=0x67;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0149 
; 0000 014A // USART1 initialization
; 0000 014B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 014C // USART1 Receiver: On
; 0000 014D // USART1 Transmitter: On
; 0000 014E // USART1 Mode: Asynchronous
; 0000 014F // USART1 Baud Rate: 9600
; 0000 0150 UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0151 UCSR1B=(1<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0152 UCSR1C=(0<<UMSEL1) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0153 UBRR1H=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0154 UBRR1L=0x67;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0155 
; 0000 0156 // Analog Comparator initialization
; 0000 0157 // Analog Comparator: Off
; 0000 0158 // The Analog Comparator's positive input is
; 0000 0159 // connected to the AIN0 pin
; 0000 015A // The Analog Comparator's negative input is
; 0000 015B // connected to the AIN1 pin
; 0000 015C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 015D SFIOR=(0<<ACME);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 015E 
; 0000 015F // ADC initialization
; 0000 0160 // ADC disabled
; 0000 0161 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0162 
; 0000 0163 // SPI initialization
; 0000 0164 // SPI disabled
; 0000 0165 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0166 
; 0000 0167 // TWI initialization
; 0000 0168 // TWI disabled
; 0000 0169 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 016A 
; 0000 016B // DS1302 Real Time Clock initialization
; 0000 016C // Trickle charger: Off
; 0000 016D rtc_init(0,0,0);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 016E 
; 0000 016F // Alphanumeric LCD initialization
; 0000 0170 // Connections are specified in the
; 0000 0171 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0172 // RS - PORTA Bit 0
; 0000 0173 // RD - PORTA Bit 1
; 0000 0174 // EN - PORTA Bit 2
; 0000 0175 // D4 - PORTA Bit 4
; 0000 0176 // D5 - PORTA Bit 5
; 0000 0177 // D6 - PORTA Bit 6
; 0000 0178 // D7 - PORTA Bit 7
; 0000 0179 // Characters/line: 20
; 0000 017A lcd_init(20);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 017B 
; 0000 017C // Watchdog Timer initialization
; 0000 017D // Watchdog Timer Prescaler: OSC/2048k
; 0000 017E #pragma optsize-
; 0000 017F WDTCR=(1<<WDCE) | (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0180 WDTCR=(0<<WDCE) | (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0181 #ifdef _OPTIMIZE_SIZE_
; 0000 0182 #pragma optsize+
; 0000 0183 #endif
; 0000 0184 
; 0000 0185 // Global enable interrupts
; 0000 0186 #asm("sei")
;PCODE: $0000012C VOL: 0
	sei
;PCODE: $0000012D VOL: 0
; 0000 0187 
; 0000 0188 while (1)
;PCODE: $0000012E VOL: 0
; 0000 0189       {
; 0000 018A         C_ResetWatchdog();
;PCODE: $0000012F VOL: 0
; 0000 018B 
; 0000 018C         lcd_putsf("Salam!");
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 018D         PORTA.3 = !PORTA.3;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 018E         C_DelayMs(1000);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 018F       }
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0190 }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;
;
;// RESET INTERNAL CHIP WATCHDOG.
;void    C_ResetWatchdog(void)
; 0000 0195 {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0196     #asm("wdr")
;PCODE: $00000146 VOL: 0
	wdr
;PCODE: $00000147 VOL: 0
; 0000 0197 }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;
;// Approximate internal chip delay.
;void    C_DelayMs(uint32_t ms)
; 0000 019B {
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 019C     uint32_t x;
; 0000 019D     for(x = 1; x <= ms; x++)
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;	ms -> Y+4
;	x -> Y+0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 019E     {
; 0000 019F         delay_ms(1);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 01A0         #asm("wdr")
;PCODE: $0000015C VOL: 0
	wdr
;PCODE: $0000015D VOL: 0
; 0000 01A1     }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 01A2 }
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;void    C_DelayUs(uint32_t us)
; 0000 01A4 {
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 01A5     uint32_t x;
; 0000 01A6     for(x = 1; x <= us; x++)
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;	us -> Y+4
;	x -> Y+0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 01A7     {
; 0000 01A8         delay_us(1);
;PCODE: $00000176 VOL: 0
; 0000 01A9         #asm("wdr")
;PCODE: $00000177 VOL: 0
	wdr
;PCODE: $00000178 VOL: 0
; 0000 01AA     }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 01AB }
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
